PostDaughterComment:
  tags:
    - comments
  summary:
    새로운 대댓글을 등록합니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 대댓글 업로드 API
    새로운 대댓글을 등록합니다.
  parameters:
    - name: "commentId"
      in: path
      description: commentId
      required: true
  requestBody:
    content:
      application/json:
        schema:
          $ref: '../components/requestBody/comment.yaml#/post'
        examples:
          $ref: '../components/examples/comment.yaml#/postRequestBody'
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            $ref: '../components/responses/comment.yaml#/post'
          examples:
            $ref: '../components/examples/comment.yaml#/post'
Get:
  tags:
    - comments
  summary:
    댓글 정보를 얻습니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 댓글 정보 확인 API
    댓글 정보를 반환받습니다.
  parameters:
    - name: "commentId"
      in: path
      description: commentId
      required: true
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            $ref: '../components/responses/comment.yaml#/get'
          examples:
            $ref: '../components/examples/comment.yaml#/get'
Put:
  tags:
    - comments
  summary:
    댓글을 수정합니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 댓글 수정 API
    댓글 내용을 수정합니다.
  parameters:
    - name: "commentId"
      in: path
      description: commentId
      required: true
  requestBody:
    content:
      application/json:
        schema:
          $ref: '../components/requestBody/comment.yaml#/put'
        examples:
          $ref: '../components/examples/comment.yaml#/putRequestBody'
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            $ref: '../components/responses/comment.yaml#/put'
          examples:
            $ref: '../components/examples/comment.yaml#/put'
Delete:
  tags:
    - comments
  summary:
    댓글을 삭제합니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 댓글 삭제 API
    댓글을 삭제합니다.
  parameters:
    - name: "commentId"
      in: path
      description: commentId
      required: true
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            success:
              type: boolean
              description: 삭제 성공 여부
            message:
              type: string
              description: 삭제 메시지
          examples:
            value:
              success: true
              message: 성공적으로 삭제되었습니다.
Post:
  tags:
    - comments
  summary:
    새로운 댓글을 등록합니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 댓글 업로드 API
    새로운 댓글을 등록합니다.
  parameters:
    - name: "postId"
      in: path
      description: postId
      required: true
  requestBody:
    content:
      application/json:
        schema:
          $ref: '../components/requestBody/comment.yaml#/post'
        examples:
          $ref: '../components/examples/comment.yaml#/postRequestBody'
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            $ref: '../components/responses/comment.yaml#/postDepthZero'
          examples:
            $ref: '../components/examples/comment.yaml#/postDepthZero'
GetPostComments:
  tags:
    - comments
  summary:
    게시물의 댓글 정보를 얻습니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 게시물 댓글 정보 확인 API
    게시물의 댓글 정보를 반환받습니다.
  parameters:
    - name: "postId"
      in: path
      description: postId
      required: true
    - name: "page"
      in: query
      schema:
        type: integer
      description: 페이지 넘버
    - name: "limit"
      in: query
      schema:
        type: integer
      description: 한 페이지에 표시할 댓글 수
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            $ref: '../components/responses/comment.yaml#/getPostComments'
          examples:
            $ref: '../components/examples/comment.yaml#/getPostComments'
GetChildren:
  tags:
    - comments
  summary:
    댓글의 대댓글 정보를 얻습니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 댓글의 대댓글 정보 확인 API
    댓글의 대댓글 정보를 반환받습니다.
  parameters:
    - name: "coomentId"
      in: path
      description: commentId
      required: true
    - name: "page"
      in: query
      schema:
        type: integer
      description: 페이지 넘버
    - name: "limit"
      in: query
      schema:
        type: integer
      description: 한 페이지에 표시할 댓글 수
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            $ref: '../components/responses/comment.yaml#/getDaughterComments'
          examples:
            $ref: '../components/examples/comment.yaml#/getDaughterComments'
GetUserComments:
  tags:
    - comments
  summary:
    댓글의 대댓글 정보를 얻습니다.
  security:
    - BearerAuth: [ ]
  description: |
    # 댓글의 대댓글 정보 확인 API
    댓글의 대댓글 정보를 반환받습니다.
  parameters:
    - name: "userId"
      in: path
      description: userId
      required: true
    - name: "page"
      in: query
      schema:
        type: integer
      description: 페이지 넘버
    - name: "limit"
      in: query
      schema:
        type: integer
      description: 한 페이지에 표시할 댓글 수
  responses:
    '201':
      description: OK
      content:
        application/json:
          schema:
            $ref: '../components/responses/comment.yaml#/getUserComments'
          examples:
            $ref: '../components/examples/comment.yaml#/getUserComments'